#!/usr/bin/env node

const fs = require('fs');
const fsExtra = require('fs-extra');
const chalk = require('chalk');
const prompt = require('prompt');
const replace = require('replace-in-file');

function validateArgs() {
	if (!argv.packageName) {
		console.warn('Provide --packageName="" representing the full Composer package name for this LT Part. The plugin slug and textdomain will be deduced from this.')
		missingOrInvalidArguments = true
	} else {
		// Taken from here https://getcomposer.org/schema.json
		const composerPackageNamePattern = '^[a-z0-9]([_.-]?[a-z0-9]+)*/[a-z0-9](([_.]?|-{0,2})[a-z0-9]+)*$'
		const regex = new RegExp(composerPackageNamePattern)
		if (!regex.test(argv.packageName)) {
			console.warn('The provided package name doesn\'t comply with the pattern required by Composer. You can test things here <https://regexr.com/5sr9h>')
			missingOrInvalidArguments = true
		}
	}

	if (!argv.namespace) {
		console.log('Provide --namespace="" representing the base PHP namespace to use throughout the PHP code.')
		missingOrInvalidArguments = true
	} else {
		// Taken from here https://stackoverflow.com/a/60470526
		const phpNamespacePattern = '^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff\\\\]*[a-zA-Z0-9_\x7f-\xff]$'
		const regex = new RegExp(phpNamespacePattern)
		if (!regex.test(argv.namespace)) {
			console.warn('The provided namespace doesn\'t comply with the pattern required by PHP.')
			missingOrInvalidArguments = true
		}
	}

	if (!argv.title) {
		console.warn('Provide --title="" representing the plugin name as displayed throughout the WordPress dashboard.')
		missingOrInvalidArguments = true
	}

	if (!argv.description) {
		console.warn('Provide --description="" representing the plugin description as displayed throughout the WordPress dashboard and the Composer package description.')
		missingOrInvalidArguments = true
	}

	if (!argv.version) {
		console.warn("Provide --version=\"\" representing the starting version of the plugin. Keep it SemVer 2.0 compatible <https://semver.org/>")
		missingOrInvalidArguments = true
	}

// Bail on bad arguments.
	if (missingOrInvalidArguments) {
		process.exit(1)
	}
}

function initialise() {
// 0. Deduce stuff from provided stuff
	const pluginTitle = argv.title;
	const pluginNamespace = argv.namespace;
	let [pluginVendor, pluginName] = argv.packageName.split('/');
	pluginName = pluginName.toLowerCase().replace(/[^a-z\d]+/g, '-');
	let pluginPrefix = pluginName;
	if ( pluginVendor.includes('pixelgradelt') ) {
		pluginPrefix = 'pixelgradelt-' + pluginPrefix;
	} else {
		pluginPrefix = pluginVendor.toLowerCase().replace(/[^a-z\d]+/g, '-') + '-' + pluginPrefix;
	}
	const pluginPrefixUnderscored = pluginPrefix.replace(/-/g, '_');
	const pluginTextDomain = pluginPrefixUnderscored;

	let options = {};

	// 1. Replace in package.json
	options = {
		dry: dryRun,
		files: [
			'package.json',
		],
		from: [
			/"name": "[^"]+"/,
			/"version": "[^"]+"/,
			/"description": "[^"]+"/,
			/"pixelgradelt-part-template.php"/
		],
		to: [
			`"name": "${pluginPrefix}"`,
			`"version": "${argv.version}"`,
			`"description": "${argv.description}"`,
			`"${pluginName}.php"`
		],
	}
	// Replace also the URLs if we've been given a GitHub repo url (without the .git part).
	if (argv.githubURL) {
		options.from.push(/https:\/\/github.com\/pixelgradelt\/pixelgradelt-part-template/g)
		options.to.push(argv.githubURL)
	}
	console.log('1. "package.json" replacement results:', replace.sync(options))

	// 2. Replace in composer.json
	options = {
		dry: dryRun,
		files: [
			'composer.json',
		],
		from: [
			/"name": "[^"]+"/,
			/"version": "[^"]+"/,
			/"description": "[^"]+"/,
			/PixelgradeLT\\\\PartTemplate/, // The base PHP namespace.
			/languages\/pixelgradelt-part-template\.pot/ // The Composer scripts section.
		],
		to: [
			`"name": "${argv.packageName}"`,
			`"version": "${argv.version}"`,
			`"description": "${argv.description}"`,
			pluginNamespace.replace(/\\/g, '\\\\'), // The base PHP namespace with escaped separators.
			`languages/${pluginName}.pot`
		],
	}
	// Replace also the URLs if we've been given a GitHub repo url (without the .git part).
	if (argv.githubURL) {
		options.from.push(/https:\/\/github.com\/pixelgradelt\/pixelgradelt-part-template/g)
		options.to.push(argv.githubURL)
	}
	console.log('2. "composer.json" replacement results:', replace.sync(options))

	// 3. Replace in pixelgradelt-part-template.php
	options = {
		dry: dryRun,
		files: [
			'pixelgradelt-part-template.php',
		],
		from: [
			/^ \* Version: .*$/gm,
			/VERSION = '.+'/,
			/^ \* Description: .*$/gm,
			/^ \* Text Domain: .*$/gm,
			/PixelgradeLT\\PartTemplate/, // The base PHP namespace.
			/PixelgradeLT Part Template Title/g,
			/pixelgradelt-part-template.php/g,
			/'pixelgradelt-part-template'/g, // The slug
			/\$pixelgradelt_part_template/g, // Prefixes
			/'pixelgradelt_part_template/g, // Prefixes
		],
		to: [
			` * Version: ${argv.version}`,
			`VERSION = '${argv.version}'`,
			` * Description: ${argv.description}`,
			` * Text Domain: ${pluginTextDomain}`,
			pluginNamespace, // The base PHP namespace.
			pluginTitle,
			`${pluginName}.php`,
			`'${pluginName}'`,
			`\$${pluginPrefixUnderscored}`,
			`'${pluginPrefixUnderscored}`,
		],
	}
	// Replace also the URLs if we've been given a GitHub repo url (without the .git part).
	if (argv.githubURL) {
		options.from.push(/https:\/\/github.com\/pixelgradelt\/pixelgradelt-part-template/g)
		options.to.push(argv.githubURL)
		options.from.push(/^ \* GitHub Plugin URI: pixelgradelt\/pixelgradelt-part-template/gm)
		options.to.push(' * GitHub Plugin URI: ' + argv.githubURL.replace(/https:\/\/github.com\//, ''))
	}
	console.log('3. Main plugin file replacement results:', replace.sync(options))

	// 4. Rename pixelgradelt-part-template.php
	if (!dryRun && fs.existsSync('pixelgradelt-part-template.php') ) {
		fs.rename('pixelgradelt-part-template.php', pluginName + '.php', function (err) {
			if (err) console.log('ERROR: ' + err);
		});
	}
	console.log('4. Renamed main plugin file to "' + pluginName + '.php".')

	// 5. Replace in all other files
	options = {
		dry: dryRun,
		files: [
			'./docs/**/*',
			'./src/**/*',
			'./tests/**/*',
			'./views/**/*',
			'./.phpcs.xml.dist'
		],
		from: [
			/@since .*$/gm,
			/PixelgradeLT\\PartTemplate/g, // the PHP namespaces
			/'0.1.0'/g, // The version
			/PixelgradeLT Part Template/g,
			/pixelgradelt-part-template.php/g,
			/'pixelgradelt-part-template\/pixelgradelt-part-template.php'/g,
			/'pixelgradelt_part_template'/g, // The text domain
			/'pixelgradelt_part_template/g, // Prefixes
			/"pixelgradelt_part_template/g, // Prefixes
			/'pixelgradelt-part-template/g, // Prefixes
			/\/pixelgradelt-part-template/g, // Prefixes
		],
		to: [
			`@since ${argv.version}`,
			pluginNamespace,
			`${argv.version}`,
			pluginTitle,
			`${pluginName}.php`,
			`${pluginName}/${pluginName}.php`,
			`'${pluginTextDomain}'`,
			`'${pluginPrefixUnderscored}`,
			`"${pluginPrefixUnderscored}`,
			`'${pluginPrefix}`,
			`/${pluginPrefix}`,
		],
	}
	// Replace also the URLs if we've been given a GitHub repo url (without the .git part).
	if (argv.githubURL) {
		options.from.push(/https:\/\/github.com\/pixelgradelt\/pixelgradelt-part-template/g);
		options.to.push(argv.githubURL);
	}
	console.log('5. Rest of the files replacement results:', replace.sync(options));

	// 6. Delete some files that should not be present, just in case.
	if (!dryRun) {
		const toRemove = [
			'./composer.lock', // No need to provide lock file.
			'./languages/pixelgradelt-part-template.pot', // The translation file should be generated on release.
		];
		toRemove.forEach( function( file ) {
			fsExtra.remove(file, function (err) {
				if (err) console.log('ERROR: ' + err);
			});
		})
	}
	console.log('6. Cleaned up some files to not let them get in your way.')

	console.log('');
	console.log(chalk.green('Done! ' + chalk.bold('Commit the new changes to your Git repo') + ' and get developing.'));
}

function extremeDietProgram() {
	if (!dryRun) {
		console.log('---');
		console.log('Starting the extreme diet program..');

		// Edit files
		let [pluginVendor, pluginName] = argv.packageName.split('/');
		pluginName = pluginName.toLowerCase().replace(/[^a-z\d]+/g, '-');

		// Remove activation and deactivation hooks calls from the main plugin file.
		options = {
			files: [`./${pluginName}.php`,],
			from: [
				/->register_hooks\(.*'hooks.activation'.*$/m,
				/->register_hooks\(.*'hooks.deactivation'.*;$/m,
			],
			to: [
				'',
				';'
			],
		}
		console.log('Edited the main plugin file:', replace.sync(options));

		// Remove register_hooks from Plugin.
		options = {
			files: [`./src/Plugin.php`,],
			from: [
				/->register_hooks\(.*'logs.manager'.*;$/m,
				/if \( is_admin\(\) \) {[^}]*}/,
			],
			to: [
				';',
				'',
			],
		}
		console.log('Edited the src/Plugin.php file:', replace.sync(options));

		// Remove service providers from ServiceProvider.
		options = {
			files: [`./src/ServiceProvider.php`,],
			from: [
				/use .*\\Logging\\Handler\\FileLogHandler;/,
				/use .*\\Logging\\Logger;/,
				/use .*\\Logging\\LogsManager;/,
				/use Psr\\Log\\LogLevel;/,
				/use .*\\Provider;/,
				/\$container\['hooks\.activation'\] = function \(.*\) {[^}]*};/,
				/\$container\['hooks\.admin_assets'\] = function \(.*\) {[^}]*};/,
				/\$container\['hooks\.deactivation'\] = function \(.*\) {[^}]*};/,
				/\$container\['hooks\.upgrade'\] = function \(.*\) {[^}]*};/,
				/\$container\['logs\.logger'\] = function \(.*\) {[^}]*};/,
				/\$container\['logs\.level'\] = function \(.*\) {[^}]*}[^}]*};/,
				/\$container\['logs\.handlers\.file'\] = function \(.*\) {[^}]*};/,
				/\$container\['logs\.manager'\] = function \(.*\) {[^}]*};/,
			],
			to: [
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
				'',
			],
		}
		console.log('Edited the src/Plugin.php file:', replace.sync(options));

		// Strip down composer.json
		let composerJson = JSON.parse(fs.readFileSync('./composer.json', 'utf8'));
		delete composerJson.require['automattic/jetpack-constants'];
		delete composerJson.require['psr/log'];
		delete composerJson['autoload-dev'];
		delete composerJson.scripts['install-codestandards'];
		delete composerJson.scripts.phpcs;
		delete composerJson.scripts.tests;
		delete composerJson.scripts['tests-unit'];
		delete composerJson.scripts['tests-integration'];
		fsExtra.writeJsonSync('./composer.json', composerJson, {spaces: 4});
		console.log('Slimmed down "composer.json".');

		// Remove files and folders.
		const toRemove = [
			'./.github',
			'./assets',
			'./docs',
			'./tests',
			'./views',
			'./.jshintrc',
			'./.phpcs.xml.dist',
			'./phpunit.xml.dist',
			'./src/Exception',
			'./src/Logging',
			'./src/Provider',
			'./src/Screen',
			'./src/Utils',
		];
		toRemove.forEach( function( file ) {
			fsExtra.remove(file, function (err) {
				if (err) console.log('ERROR: ' + err);
				console.log('Deleted '+file);
			});
		})

	} else {
		console.log('Skipping the extreme diet program in --dryRun mode.')
	}
}

function run() {
	validateArgs();
	initialise();
	if ( bareBones ) {
		extremeDietProgram();
	}
}

// Get arguments
let missingOrInvalidArguments = false;
const argv = require('minimist')(process.argv.slice(2), {
	string: ['packageName', 'title', 'description', 'namespace', 'version'],
	boolean: ['dryRun', 'dry', 'help'],
})

if ( !!argv.help ) {
	console.log('');
	console.log('Here are the arguments you can/should provide:');
	console.log('');
	console.log( chalk.blue('--packageName')+'           '+chalk.red('Required. ')+'The full Composer package name for this LT Part. The plugin slug and textdomain will be deduced from this.');
	console.log( chalk.blue('--namespace')+'             '+chalk.red('Required. ')+'The base PHP namespace to use throughout the PHP code.');
	console.log( chalk.blue('--title')+'                 '+chalk.red('Required. ')+'The plugin name as displayed throughout the WordPress dashboard.');
	console.log( chalk.blue('--description')+'           '+chalk.red('Required. ')+'The plugin description as displayed throughout the WordPress dashboard and the Composer package description.');
	console.log( chalk.blue('--version')+'               '+chalk.red('Required. ')+'The starting version of the plugin. Keep it SemVer 2.0 compatible <https://semver.org/>.');
	console.log( chalk.blue('--githubURL')+'             The GitHub repo URL of this LT Part (without the .git part). Just a simple HTTPS URL.');
	console.log( chalk.blue('--bareBones')+'             Delete most of the files to reach a very bare-bones state. Useful for companion plugins that don\'t do anything because there is no need to.');
	console.log( chalk.blue('--dryRun')+'                Don\'t do any actual changes, just simulate. Will not run --bareBones, if present, in --dryRun mode.');
	console.log( chalk.blue('--help')+'                  Display these helpful details.');

	process.exit(0);
}

const dryRun = !!argv.dryRun || !!argv.dry;
const bareBones = !!argv.bareBones || !!argv.bare;

if ( ! dryRun ) {

	// user confirmation required!
	prompt.start();

	// disable prefix message & colors
	prompt.message = '';
	prompt.delimiter = '';
	prompt.colors = false;

	// wait for user confirmation
	prompt.get({
		properties: {

			// setup the dialog
			confirm: {
				// allow yes, no, y, n, YES, NO, Y, N as answer
				pattern: /^(yes|no|y|n)$/gi,
				description: 'Do you really want to initialise all the files as for a fresh LT Part? (yes/no)',
				message: 'Type yes/no',
				required: true,
				default: 'no'
			}
		}
	}, function (err, result) {
		// transform to lower case
		const c = result.confirm.toLowerCase();

		// yes or y typed ? otherwise abort
		if (c != 'y' && c != 'yes') {
			console.log('Stopping the LT Part initialisation. Bye bye!');
			process.exit(0);
		}

		// Action confirmed. Carry on.
		run();
	});
} else {
	// Run without confirmation since we are dry-running.
	run();
}
